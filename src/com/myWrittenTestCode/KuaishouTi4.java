package com.myWrittenTestCode;

import java.util.Scanner;
/**
 * 保护伞芯片公司现在拥有一块特殊的芯片材料板，这块材料板可以看做一个n*m大小的矩阵，矩阵中的每一个单元蕴含着不同的能量。
 * 现在公司需要放置若干块a*b大小的芯片在这块材料板上，但是放置芯片的前提是材料板有a*b大小的空位置，并且这些位置的能量是一样的。
 * 为了满足矩形内每个单元的能量是一样的这个要求，公司需要释放某些单元格一定量的能量，释放的量可以精确控制。释放能量的代价是e1-e2
 * （其中e1>=e2,e1表示释放前的能量，e2表示释放之后的能量）。放置一块芯片的代价为矩形内释放的总能量之和。
 * （保护伞公司技术限制，能量只能释放出去而不能注入进去）
 * 现在公司公司按照如下策略去放置芯片：
 * 1.找到可以放置下1块芯片所需要释放的最小总能量，然后放置该芯片（程序输出中用芯片的左上角坐标记录）。
 * 2.如果有多个位置代价一样，那么按照行小的优先，如果行一样，按照列小的优先。
 * 3.重复1步骤继续下一个芯片直到整个面板无法再放置芯片。注意，芯片之间不能重叠。
 * 
 * 输入描述：
 * 第一行有4个正整数n,m,a,b分别表示n*m大小的材料板和a*b大小的芯片。其中1<=a<=n<=1000，1<=b<=m<=1000
 * 下面n行每行有m个数字，表示对应位置的能量，每个单位的能量值不超过1000000000.
 * 输出描述：
 * 输出包含k行，k表示按照公司的放置策略可以放置的芯片数量。
 * 下面k行每行包含3个数字Ri，Ci，Costi分别表示放置第i块芯片左上角的行，列以及放置这个芯片的代价（需要释放的总能量之和）
 * 输入
 * 2 2 2 1
 * 2 1
 * 3 1
 * 输出
 * 2
 * 1 2 0
 * 1 1 1
 * 说明：
 * 材料板是2*2大小，芯片是2*1大小，按照公司的策略一共可以放置2块，第一块左上角在（1，2），该位置能单元格两都一样，花费是0。
 * 第二块左上角在（1,1），该位置单元格不一样，需要把3释放成2，花费是1
 * @author Administrator
 *
 */
public class KuaishouTi4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        System.out.println(n);
	}

}
